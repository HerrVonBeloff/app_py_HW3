import asyncio
import auth
import crud, models, schemas
import uvicorn

from fastapi import FastAPI, Depends, HTTPException, status
from sqlalchemy.orm import Session
from jose import JWTError, jwt
from database import SessionLocal, engine
from fastapi.responses import RedirectResponse
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from contextlib import asynccontextmanager
from schemas import *
from database import redis_client
from datetime import datetime, timedelta


print("üöÄ FastAPI —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

models.Base.metadata.create_all(bind=engine)

# SECRET_KEY = "your-secret-key"
# ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with SessionLocal() as db:
        crud.delete_expired_links(db)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(periodic_cleanup())
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        pass

app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_current_user(
    token: Optional[str] = None,
    db: Session = Depends(get_db)
) -> Optional[models.User]:
    if not token:  
        return None  # ‚úÖ –¢–µ–ø–µ—Ä—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

    try:
        payload = jwt.decode(token, auth.SECRET_KEY, algorithms=[auth.ALGORITHM])
        username: str = payload.get("sub")
        if not username:
            return None
    except (JWTError, KeyError, TypeError): 
        return None

    return db.query(models.User).filter(models.User.username == username).first()





@app.post("/links/shorten", response_model=schemas.Link)
def create_short_link(
    link: schemas.LinkCreate,
    db: Session = Depends(get_db),
    current_user: Optional[models.User] = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏. –í—Ä–µ–º–µ–Ω–Ω—ã–µ (24 —á) –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö, –≤–µ—á–Ω—ã–µ ‚Äî –µ—Å–ª–∏ is_permanent=True —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."""
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π, –æ–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¢–û–õ–¨–ö–û –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 24 —á–∞—Å–∞
    if not current_user:
        link.is_permanent = False
        link.expires_at = datetime.now() + timedelta(days=1)
    else:
        if link.is_permanent is False: 
            link.expires_at = datetime.now() + timedelta(days=1)

    return crud.create_link(db, link, user=current_user)



@app.get("/{short_code}")
def redirect_to_original(short_code: str, db: Session = Depends(get_db)):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫—ç—à–µ
    cached_url = redis_client.get(f"link:{short_code}")
    if cached_url:
        print(f"‚úÖ –ö—ç—à –Ω–∞–π–¥–µ–Ω –¥–ª—è {short_code}")
        return RedirectResponse(url=cached_url)

    # –ï—Å–ª–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ –ë–î –∏ –∫—ç—à–∏—Ä—É–µ–º
    link = crud.get_link_by_short_code(db, short_code)
    if link is None:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    redis_client.setex(f"link:{short_code}", 3600, link.original_url)
    return RedirectResponse(url=link.original_url)

@app.delete("/links/{short_code}")
def delete_short_link(
    short_code: str,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
):
    link = crud.get_link_by_short_code(db, short_code)
    if link is None:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if link.owner_id is not None and link.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É")
    
    crud.delete_link(db, short_code, current_user)  # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
    return {"message": "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}


@app.put("/links/{short_code}")
def update_short_link(
    short_code: str,
    original_url: str,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
):
    link = crud.get_link_by_short_code(db, short_code)
    if link is None:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if link.owner_id is not None and link.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É")

    updated_link = crud.update_link(db, short_code, original_url)
    return updated_link


@app.get("/links/{short_code}/stats", response_model=schemas.Link)
def get_link_stats(short_code: str, db: Session = Depends(get_db)):
    return crud.get_link_by_short_code(db, short_code) or HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")



@app.get("/links/{short_code}/original")
def get_original_url(short_code: str, db: Session = Depends(get_db)):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∫–æ–¥—É."""
    link = crud.get_link_by_short_code(db, short_code)
    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return {"original_url": link.original_url}



@app.post("/register", response_model=schemas.User)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    existing_user = db.query(models.User).filter(
        (models.User.email == user.email) |
        (models.User.username == user.username)
    ).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="User already exists")
    
    hashed_password = auth.get_password_hash(user.password)
    db_user = models.User(
        username=user.username,
        email=user.email,
        hashed_password=hashed_password
    )
    db.add(db_user)
    db.commit()
    return db_user

@app.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(models.User).filter(
        models.User.username == form_data.username
    ).first()
    if not user or not auth.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials"
        )
    return {
        "access_token": auth.create_access_token({"sub": user.username}),
        "token_type": "bearer"
    }

@app.post("/links/{short_code}/set_expiry")
def set_link_expiry(
    short_code: str,
    data: LinkExpiryUpdate,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    expires_at = data.expires_at

    link = crud.get_link_by_short_code(db, short_code)
    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if not current_user or link.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É")


    expires_at = expires_at.replace(tzinfo=None)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    link.expires_at = expires_at
    db.commit()
    db.refresh(link)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –≤ Redis
    redis_client.delete(f"link:{short_code}")

    return {"message": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", "expires_at": expires_at}



async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        with SessionLocal() as db:
            crud.delete_expired_links(db)

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="debug")
