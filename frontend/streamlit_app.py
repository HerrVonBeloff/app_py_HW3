import streamlit as st
import requests
from datetime import datetime, timedelta
import pytz

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_BASE_URL = "https://app-py-hw3.onrender.com"
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è ---
st.set_page_config(page_title="–°–µ—Ä–≤–∏—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫", page_icon="üîó", layout="wide")
st.title("üîó –£–º–Ω—ã–π (–∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å) —Å–µ—Ä–≤–∏—Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")

st.markdown("---")

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def get_auth_headers() -> dict:
    token = st.session_state.get("token")
    return {"Authorization": f"Bearer {token}"} if token else {}

def format_datetime(dt_str: str | None) -> str:
    if not dt_str:
        return "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
    dt = datetime.fromisoformat(dt_str)
    return dt.astimezone(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M:%S (–ú–°–ö)")

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
st.sidebar.header("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
if "token" not in st.session_state:
    st.session_state.token = None
    st.session_state.current_user = None

if st.session_state.token:
    st.sidebar.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.current_user}")
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state.token = None
        st.session_state.current_user = None
        st.rerun()
else:
    tab_login, tab_register = st.sidebar.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    with tab_login:
        username = st.text_input("–õ–æ–≥–∏–Ω", key="login_username")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        if st.button("–í–æ–π—Ç–∏"):
            response = requests.post(f"{API_BASE_URL}/token", data={"username": username, "password": password})
            if response.status_code == 200:
                st.session_state.token = response.json()["access_token"]
                st.session_state.current_user = username
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    with tab_register:
        new_username = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω", key="register_username")
        new_email = st.text_input("Email", key="register_email")
        new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="register_password")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            response = requests.post(f"{API_BASE_URL}/register", json={"username": new_username, "email": new_email, "password": new_password})
            if response.status_code == 200:
                st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
            else:
                st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                
# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ ---
st.subheader("‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É")
with st.form("create_form"):
    original_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É")
    custom_alias = st.text_input("–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    is_permanent = st.checkbox("–°–¥–µ–ª–∞—Ç—å –≤–µ—á–Ω–æ–π (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)", value=False, disabled=not st.session_state.token)
    if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å"):
        data = {
        "original_url": original_url,
        "custom_alias": custom_alias,
        "is_permanent": is_permanent if st.session_state.token else False
        }

        st.write("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:", data)
        st.write(get_auth_headers())
        response = requests.post(f"{API_BASE_URL}/links/shorten", json=data, headers=get_auth_headers())
        if response.status_code in [200, 201]:
            response_data = response.json()
            short_code = response_data.get("short_code")
            if not short_code:
                raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç short_code")
            short_url = f"{API_BASE_URL}/{short_code}"
            st.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: [{short_url}]({short_url})")
        else:
            error_message = response.json().get("detail") or response.text
            st.error(f"–û—à–∏–±–∫–∞ API: {error_message}")

# --- –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ ---
with st.expander("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏"):
    # üîç –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    st.subheader("üîç –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∫–æ–¥—É")
    with st.form("search_original_form"):
        search_code = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥")
        if st.form_submit_button("üîé –ù–∞–π—Ç–∏"):
            response = requests.get(f"{API_BASE_URL}/links/{search_code}/original")
            if response.status_code == 200:
                data = response.json()
                st.success(f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [{data['original_url']}]({data['original_url']})")
            else:
                st.error("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏")
    with st.form("stats_form"):
        stats_code = st.text_input("–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        if st.form_submit_button("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            response = requests.get(f"{API_BASE_URL}/links/{stats_code}/stats")
            if response.status_code == 200:
                data = response.json()
                st.markdown(f"""
                **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏:** {stats_code}
                - üîó **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:** [{data['original_url']}]({data['original_url']})
                - üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {format_datetime(data['created_at'])}
                - ‚è≥ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {format_datetime(data['expires_at'])}
                - üîÄ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥:** {format_datetime(data['last_accessed'])}
                - üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:** {data['clicks']}
                """)
            else:
                st.error("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

st.markdown("---")
st.markdown("üîî **–í–∞–∂–Ω–æ:** –°—Å—ã–ª–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.")
